#!/bin/bash
# GET     /bookkeeper/v1/customers (org.dataone.bookkeeper.resources.CustomersResource)
# POST    /bookkeeper/v1/customers (org.dataone.bookkeeper.resources.CustomersResource)
# GET     /bookkeeper/v1/customers/{customerId: [0-9]+} (org.dataone.bookkeeper.resources.CustomersResource)
# DELETE  /bookkeeper/v1/customers/{customerId} (org.dataone.bookkeeper.resources.CustomersResource)
# PUT     /bookkeeper/v1/customers/{customerId} (org.dataone.bookkeeper.resources.CustomersResource)
# GET     /bookkeeper/v1/orders (org.dataone.bookkeeper.resources.OrdersResource)
# POST    /bookkeeper/v1/orders (org.dataone.bookkeeper.resources.OrdersResource)
# DELETE  /bookkeeper/v1/orders/{orderId} (org.dataone.bookkeeper.resources.OrdersResource)
# GET     /bookkeeper/v1/orders/{orderId} (org.dataone.bookkeeper.resources.OrdersResource)
# PUT     /bookkeeper/v1/orders/{orderId} (org.dataone.bookkeeper.resources.OrdersResource)
# POST    /bookkeeper/v1/orders/{orderId}/pay (org.dataone.bookkeeper.resources.OrdersResource)
# GET     /bookkeeper/v1/products (org.dataone.bookkeeper.resources.ProductsResource)
# POST    /bookkeeper/v1/products (org.dataone.bookkeeper.resources.ProductsResource)
# DELETE  /bookkeeper/v1/products/{productId} (org.dataone.bookkeeper.resources.ProductsResource)
# GET     /bookkeeper/v1/products/{productId} (org.dataone.bookkeeper.resources.ProductsResource)
# PUT     /bookkeeper/v1/products/{productId} (org.dataone.bookkeeper.resources.ProductsResource)
# GET     /bookkeeper/v1/quotas (org.dataone.bookkeeper.resources.QuotasResource)
# POST    /bookkeeper/v1/quotas (org.dataone.bookkeeper.resources.QuotasResource)
# DELETE  /bookkeeper/v1/quotas/{quotaId} (org.dataone.bookkeeper.resources.QuotasResource)
# GET     /bookkeeper/v1/quotas/{quotaId} (org.dataone.bookkeeper.resources.QuotasResource)
# PUT     /bookkeeper/v1/quotas/{quotaId} (org.dataone.bookkeeper.resources.QuotasResource)
# GET     /bookkeeper/v1/usages (org.dataone.bookkeeper.resources.UsagesResource)
# POST    /bookkeeper/v1/usages (org.dataone.bookkeeper.resources.UsagesResource)
# GET     /bookkeeper/v1/usages/status (org.dataone.bookkeeper.resources.UsagesResource)
# GET     /bookkeeper/v1/usages/{id} (org.dataone.bookkeeper.resources.UsagesResource)
# DELETE  /bookkeeper/v1/usages/{usageId} (org.dataone.bookkeeper.resources.UsagesResource)
# PUT     /bookkeeper/v1/usages/{usageId} (org.dataone.bookkeeper.resources.UsagesResource)
#
# INFO  [2022-04-26 06:07:58,204] io.dropwizard.setup.AdminEnvironment: tasks =
#
# POST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)
# POST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)

SERVICE="https://api.test.dataone.org/bookkeeper/v1"

list ()
{
    # List a resource collection, or just one if an ID is given
    RESOURCE=$1
    ID=$2
    curl -s -H "Authorization: Bearer $TOKEN" ${SERVICE}/${RESOURCE}/${ID} | jq .
}

create ()
{
    # Create a new resource, determining the RESOURCE type from the JSON object passed in
    JSON=$1
    RESOURCE=$(cat ${JSON} | jq .object | sed -e 's/"//g' -e 's/$/s/')
    curl -s -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/json' -d "@${JSON}" ${SERVICE}/${RESOURCE} | jq .
}

delete ()
{
    # Delete a resource
    RESOURCE=$1
    ID=$2
    curl -s -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/json' -X DELETE ${SERVICE}/${RESOURCE}/${ID} | jq .
}

mark_paid ()
{
    # Mark an order as paid
    ID=$1
    curl -s -H "Authorization: Bearer $TOKEN" -H 'Content-Type: application/json' -X POST ${SERVICE}/orders/${ID}/pay | jq .
}

usage ()
{
    echo "$0 [-h] [-c json-file] -[p] [-l] [-o] [-q] [-u] [-d id] [-m id]"
}

while getopts "hploquc:d:m:" option; do
   case $option in
      h) # display Help
         usage
         exit;;
      p) # list products
         # Check next positional parameter
         eval nextopt=\${$OPTIND}
         # existing or starting with dash?
         if [[ -n $nextopt && $nextopt != -* ]] ; then
            OPTIND=$((OPTIND + 1))
            ID=$nextopt
         fi
         list products $ID
         exit;; 
      l) # list customers
         # Check next positional parameter
         eval nextopt=\${$OPTIND}
         # existing or starting with dash?
         if [[ -n $nextopt && $nextopt != -* ]] ; then
            OPTIND=$((OPTIND + 1))
            ID=$nextopt
         fi
         list customers $ID
         exit;; 
      o) # list orders
         # Check next positional parameter
         eval nextopt=\${$OPTIND}
         # existing or starting with dash?
         if [[ -n $nextopt && $nextopt != -* ]] ; then
            OPTIND=$((OPTIND + 1))
            ID=$nextopt
         fi
         list orders $ID
         exit;; 
      q) # list quotas
         # Check next positional parameter
         eval nextopt=\${$OPTIND}
         # existing or starting with dash?
         if [[ -n $nextopt && $nextopt != -* ]] ; then
            OPTIND=$((OPTIND + 1))
            ID=$nextopt
         fi
         list quotas $ID
         exit;; 
      u) # list usages
         # Check next positional parameter
         eval nextopt=\${$OPTIND}
         # existing or starting with dash?
         if [[ -n $nextopt && $nextopt != -* ]] ; then
            OPTIND=$((OPTIND + 1))
            ID=$nextopt
         fi
         list usages $ID
         exit;; 
      c) # Enter a JSON filename
         create $OPTARG
         exit;;
      d) # Enter an identifier
         delete customers $OPTARG
         exit;;
      m) # mark order as paid
         mark_paid $OPTARG
         exit;;
     \?) # Invalid option
         echo "Error: Invalid option"
         usage
         exit;;
   esac
done


